/* Copyright (c) 2015 Lionbridge Technologies, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * */

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml.Linq;

namespace Lionbridge.onDemand.Client
{
    /// <summary>
    /// 
    /// </summary>
    public class Quote : IXmlSerializable
    {
        #region Public Properties

        /// <summary>
        /// onDemand ID for this quote.
        /// </summary>
        public Int32 QuoteID
        {
            get;
            protected set;
        }

        /// <summary>
        /// String representing the date/time that the project was created in UTC.
        /// </summary>
        public DateTime CreationDate
        {
            get;
            protected set;
        }

        /// <summary>
        /// The number of translations requested. For example, if the merchant sends 5 products to be
        /// translated into 3 languages, the value of TotalTranslations would be 15.
        /// </summary>
        public virtual Int32 TotalTranslations
        {
            get;
            protected set;
        }

        /// <summary>
        /// Number of free translations available at the selected service level.
        /// </summary>
        public Int32 TranslationCredit
        {
            get;
            protected set;
        }

        /// <summary>
        /// Currency used to pay for the project. See glossary for list of valid currencies.
        /// </summary>
        public String Currency
        {
            get;
            protected set;
        }

        /// <summary>
        /// Total price that needs to be paid. Exclude translation credit.
        /// </summary>
        public Decimal TotalCost
        {
            get;
            protected set;
        }

        /// <summary>
        /// If a merchant has a positive credit balance with onDemand, it will be reported here.
        /// </summary>
        public Decimal PrepaidCredit
        {
            get;
            protected set;
        }

        /// <summary>
        /// TotalPrice - PrepaidCredit
        /// </summary>
        public Decimal AmountDue
        {
            get;
            protected set;
        }

        /// <summary>
        /// The status of the quote.
        /// </summary>
        public String Status
        {
            get;
            protected set;
        }

        /// <summary>
        /// URL to authorize the quote.
        /// </summary>
        public String AuthorizeURL
        {
            get;
            protected set;
        }

        /// <summary>
        /// Use this to reject the quote.
        /// </summary>
        public String RejectURL
        {
            get;
            protected set;
        }

        /// <summary>
        /// If additional funds are required, the status code of 402 will be returned and the
        /// response will include a PaymentURL that includes a link to a paypal page.
        /// </summary>
        public String PaymentURL
        {
            get;
            protected set;
        }

        /// <summary>
        /// A list of projects that have been generated by this transaction.
        /// </summary>
        public IEnumerable<Project> Projects
        {
            get;
            protected set;
        }

        /// <summary>
        /// If the quote has been authorized, the payments section shows details about how the quote was paid.
        /// </summary>
        public IEnumerable<Payment> Payments
        {
            get;
            protected set;
        }

        /// <summary>
        /// If the site has been set up as a “provisioning” or “charge back” site, you have the option to be invoiced for transactions at a
        /// later date. If the site is configured as a charge back site, adding an InternalBillingCode to the request will automatically
        /// authorize the request and bill the transaction to a global purchase order. If the site has been configured to be a provisioning site,
        /// InternalBillingCode can be used optionally with PurchaseOrderNumber to group transactions.
        /// </summary>
        public String InternalBillingCode
        {
            get;
            set;
        }

        /// <summary>
        /// If the site has been set up as a “provisioning” site, you have the option to be invoiced for transactions at a later date. 
        /// To do so, the authorization request has to contain a PurchaseOrderNumber that matches a purchase order we have on file.
        /// </summary>
        public String PurchaseOrderNumber
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        private IContentAPI Client
        {
            get;
            set;
        }

        #endregion


        #region Constructor(s)

        /// <summary>
        /// 
        /// </summary>
        public Quote() : base()
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="quoteID"></param>
        /// <param name="creationDate"></param>
        /// <param name="totalTranslations"></param>
        /// <param name="translationCredit"></param>
        /// <param name="currency"></param>
        /// <param name="totalCost"></param>
        /// <param name="prepaidCredit"></param>
        /// <param name="amountDue"></param>
        /// <param name="projects"></param>
        public Quote(Int32 quoteID, DateTime creationDate, Int32 totalTranslations, Int32 translationCredit,
                              String currency, Decimal totalCost, Decimal prepaidCredit, Decimal amountDue, IEnumerable<Project> projects)
        {
            this.QuoteID = quoteID;

            this.CreationDate = creationDate;
            this.TotalTranslations = totalTranslations;
            this.TranslationCredit = translationCredit;
            this.TotalCost = totalCost;
            this.PrepaidCredit = prepaidCredit;
            this.AmountDue = amountDue;
            this.Currency = currency;

            if (projects != null)
            {
                this.Projects = new List<Project>(projects);
            }
            else
            {
                this.Projects = new List<Project>();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="element"></param>
        /// <param name="client"></param>
        public Quote(XElement element, IContentAPI client)
        {
            this.Client = client;

            this.UpdateFromXElement(element);
        }

        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="element"></param>
        internal void UpdateFromXElement(XElement element)
        {
            if (element != null)
            {
                this.QuoteID = element.GetChildValueAsInt32("QuoteID");
                this.Status = element.GetChildValue("Status");
                this.AuthorizeURL = element.GetChildValue("AuthorizeURL");
                this.RejectURL = element.GetChildValue("RejectURL");
                this.PaymentURL = element.GetChildValue("PaymentURL");
                this.Currency = element.GetChildValue("Currency");
                this.TotalCost = element.GetChildValueAsDecimal("TotalCost");
                this.PrepaidCredit = element.GetChildValueAsDecimal("PrepaidCredit");
                this.AmountDue = element.GetChildValueAsDecimal("AmountDue");

                this.TotalTranslations = element.GetChildValueAsInt32("TotalTranslations");
                this.TranslationCredit = element.GetChildValueAsInt32("TranslationCredit");
                this.CreationDate = element.GetChildValueAsDateTime("CreationDate");

                if (element.Element("Projects") != null)
                {
                    this.Projects = Project.CreateEnumerable(element.Element("Projects"), this.Client);
                }

                if (element.Element("Payments") != null)
                {
                    this.Payments = Payment.CreateEnumerable(element.Element("Payments"));
                }

            }
        }


        #region IXmlSerializable

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public String ToXmlString()
        {
            StringBuilder builder = new StringBuilder();

            builder.Append("<Quote>");
            builder.Append("<QuoteID>" + this.QuoteID + "</QuoteID>");

            builder.Append("<CreationDate>" + this.CreationDate.ToUniversalTime().ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ssK") + "</CreationDate>");
            

            builder.Append("<TotalTranslations>" + this.TotalTranslations + "</TotalTranslations>");
            builder.Append("<TranslationCredit>" + this.TranslationCredit + "</TranslationCredit>");
            builder.Append("<TotalCost>" + this.TotalCost.ToString(CultureInfo.InvariantCulture) + "</TotalCost>");
            builder.Append("<PrepaidCredit>" + this.PrepaidCredit.ToString(CultureInfo.InvariantCulture) + "</PrepaidCredit>");
            builder.Append("<AmountDue>" + this.AmountDue.ToString(CultureInfo.InvariantCulture) + "</AmountDue>");
            builder.Append("<Currency>" + this.Currency + "</Currency>");

            if (!String.IsNullOrEmpty(this.PurchaseOrderNumber))
            {
                builder.Append("<PurchaseOrderNumber>" + this.PurchaseOrderNumber + "</PurchaseOrderNumber>");
            }

            if (!String.IsNullOrEmpty(this.InternalBillingCode))
            {
                builder.Append("<InternalBillingCode>" + this.InternalBillingCode + "</InternalBillingCode>");
            }

            builder.Append("<Projects>");

            if (this.Projects != null)
            {
                foreach (var project in this.Projects)
                {
                    builder.Append(project.ToXmlString());
                }
            }

            builder.Append("</Projects>");

            builder.Append("</Quote>");

            return builder.ToString();
        }

        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="element"></param>
        /// <param name="client"></param>
        /// <returns></returns>
        internal static IEnumerable<Quote> CreateEnumerable(XElement element, IContentAPI client)
        {
            List<Quote> result = new List<Quote>();

            foreach (XElement quote in element.Elements("Quote"))
            {
                result.Add(new Quote(quote, client));
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public RejectQuoteStatus Reject()
        {
            if (this.Client == null)
            {
                throw new InvalidOperationException("The quote does not have an APIClient to communicate with");
            }

            return this.Client.RejectQuote(this);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public QuoteAuthorization Authorize()
        {
            if (this.Client == null)
            {
                throw new InvalidOperationException("The quote does not have an APIClient to communicate with");
            }

            return this.Client.AuthorizeQuote(this);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Update()
        {
            if (this.Client == null)
            {
                throw new InvalidOperationException("The quote does not have an APIClient to communicate with");
            }

            this.Client.UpdateQuote(this);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="timeoutInSeconds"></param>
        public void WaitWhileCalculating(Int32 timeoutInSeconds = 60)
        {
            DateTime start = DateTime.Now;

            while (this.Status == "Calculating" && DateTime.Now - start < TimeSpan.FromSeconds(timeoutInSeconds))
            {
                Thread.Sleep(TimeSpan.FromSeconds(10));

                this.Update();
            }
        }
    }
}
