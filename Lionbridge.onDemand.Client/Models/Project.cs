/* Copyright (c) 2015 Lionbridge Technologies, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;

namespace Lionbridge.onDemand.Client
{
    /// <summary>
    /// Representation of a Project to be completed by the onDemand service
    /// </summary>
    public class Project : IXmlSerializable
    {
        /// <summary>
        /// The ID of the project.  Generated by onDemand.
        /// </summary>
        public Int32 ProjectID
        {
            get;
            internal set;
        }

        /// <summary>
        /// The name of the project
        /// </summary>
        public String Name
        {
            get;
            internal set;
        }

        /// <summary>
        /// The onDemand service configuration used for the project
        /// </summary>
        public Int32 ServiceID
        {
            get;
            private set;
        }

        /// <summary>
        /// Status of the project
        /// </summary>
        public String Status
        {
            get;
            private set;
        }

        /// <summary>
        /// The URL where the project can be downloaded.  See GetProject.
        /// </summary>
        public Uri URL
        {
            get;
            private set;
        }

        /// <summary>
        /// DateTime when the project was created
        /// </summary>
        public DateTime CreationDate
        {
            get;
            private set;
        }

        /// <summary>
        /// DateTime when the project is due
        /// </summary>
        public DateTime DueDate
        {
            get;
            private set;
        }

        /// <summary>
        /// DateTime when the project was completed
        /// </summary>
        public DateTime CompletionDate
        {
            get;
            private set;
        }

        /// <summary>
        /// Price charged for the project
        /// </summary>
        public Decimal Price
        {
            get;
            private set;
        }

        /// <summary>
        /// The currency that the project was paid in. See glossary for list of valid currencies.
        /// </summary>
        public String Currency
        {
            get;
            private set;
        }

        /// <summary>
        /// The source language of the file(s) or product(s) in the project
        /// </summary>
        public String SourceLanguage
        {
            get;
            private set;
        }

        /// <summary>
        /// The target languages to translate the project into
        /// </summary>
        public IEnumerable<String> TargetLanguages
        {
            get
            {
                return this.TargetLanguagesList;
            }
        }

        /// <summary>
        /// Private list of target languages
        /// </summary>
        private List<String> TargetLanguagesList
        {
            get;
            set;
        }

        /// <summary>
        /// The list of Products in this Project.  May be empty
        /// </summary>
        public IEnumerable<Product> Products
        {
            get
            {
                return this.ProductsList;
            }
        }

        /// <summary>
        /// Private list of project Products
        /// </summary>
        private List<Product> ProductsList
        {
            get;
            set;
        }

        /// <summary>
        /// The list of Files in theis Project.  May be empty
        /// </summary>
        public IEnumerable<File> Files
        {
            get
            {
                return this.FilesList;
            }
        }

        /// <summary>
        /// Private list of files
        /// </summary>
        private List<File> FilesList
        {
            get;
            set;
        }

        /// <summary>
        /// The list of Reference Files which provide additional information but will not be translated.  May be empty
        /// </summary>
        public IEnumerable<File> ReferenceFiles
        {
            get
            {
                return this.ReferenceFilesList;
            }
        }

        /// <summary>
        /// Private list of reference files
        /// </summary>
        private List<File> ReferenceFilesList
        {
            get;
            set;
        }

        /// <summary>
        /// Reference to the sdk client that retrieved this object
        /// </summary>
        private IContentAPI Client
        {
            get;
            set;
        }

        #region Constructors

        /// <summary>
        /// Empty Constructor
        /// </summary>
        internal Project()
        {
            this.TargetLanguagesList = new List<string>();
            this.ProductsList = new List<Product>();
            this.FilesList = new List<File>();
            this.ReferenceFilesList = new List<File>();
        }

        /// <summary>
        /// Constructor from XML
        /// </summary>
        /// <param name="element"></param>
        /// <param name="client"></param>
        public Project(XElement element, IContentAPI client)
            : this()
        {

            this.Client = client;

            this.UpdateFromXElement(element);

        }

        #endregion


        #region Static Methods

        /// <summary>
        /// Create an Enumerable of Project from XML
        /// </summary>
        /// <param name="element"></param>
        /// <returns></returns>
        internal static IEnumerable<Project> CreateEnumerable(XElement element, IContentAPI client)
        {
            List<Project> result = new List<Project>();

            foreach (XElement project in element.Elements("Project"))
            {
                result.Add(new Project(project, client));
            }

            return result;
        }

        #endregion

        #region IXmlSerializable Members

        /// <summary>
        /// Seralize the class data to XML in an onDemand specific way
        /// </summary>
        /// <returns>The XML string which can be passed to onDemand</returns>
        public string ToXmlString()
        {
            StringBuilder builder = new StringBuilder();

            builder.Append("<Project>");

            builder.Append("<ProjectID>");
            builder.Append(this.ProjectID);
            builder.Append("</ProjectID>");

            if (!String.IsNullOrEmpty(this.Name))
            {
                builder.Append(new XElement("ProjectName", this.Name).ToString(SaveOptions.DisableFormatting));
            }


            if (this.ServiceID > 0)
            {
                builder.Append("<ServiceID>");
                builder.Append(this.ServiceID);
                builder.Append("</ServiceID>");
            }

            if (!String.IsNullOrEmpty(this.SourceLanguage))
            {
                builder.Append("<SourceLanguage><LanguageCode>");
                builder.Append(this.SourceLanguage);
                builder.Append("</LanguageCode></SourceLanguage>");
            }
            
            if (this.TargetLanguages != null && this.TargetLanguages.Count() > 0)
            {
                builder.Append("<TargetLanguages>");
                foreach (var targetLanguage in this.TargetLanguages)
                {
                    builder.Append("<TargetLanguage><LanguageCode>");
                    builder.Append(targetLanguage);
                    builder.Append("</LanguageCode></TargetLanguage>");
                }

                builder.Append("</TargetLanguages>");
            }

            if (this.Products != null && this.Products.Count() > 0)
            {
                builder.Append("<Products>");

                foreach (var product in this.Products)
                {
                    builder.Append(product.ToXmlStringSimple());
                }
                builder.Append("</Products>");
            }

            if (this.Files != null && this.Files.Count() > 0)
            {
                builder.Append("<Files>");

                foreach (var file in this.Files)
                {
                    builder.Append(file.ToXmlStringExtended(isReferenceFile: false, includeExtended: true));
                }
                builder.Append("</Files>");
            }

            if (this.ReferenceFiles != null && this.ReferenceFiles.Count() > 0)
            {
                builder.Append("<ReferenceFiles>");

                foreach (var file in this.ReferenceFiles)
                {
                    builder.Append(file.ToXmlStringExtended(isReferenceFile: true, includeExtended: true));
                }
                builder.Append("</ReferenceFiles>");
            }

            builder.Append("</Project>");

            return builder.ToString();
        }

        /// <summary>
        /// Seralize the class data to XML in an onDemand specific way without any details
        /// </summary>
        /// <returns>The XML string which can be passed to onDemand</returns>
        public string ToXmlStringSimple()
        {
            StringBuilder builder = new StringBuilder();

            builder.Append("<Project>");

            builder.Append("<ProjectID>");
            builder.Append(this.ProjectID);
            builder.Append("</ProjectID>");

            builder.Append("</Project>");

            return builder.ToString();
        }


        #endregion

        /// <summary>
        /// Update the Project from XML
        /// </summary>
        /// <param name="element"></param>
        internal void UpdateFromXElement(XElement element)
        {
            if (element != null)
            {
                this.ProjectID = element.GetChildValueAsInt32("ProjectID");
                this.ServiceID = element.GetChildValueAsInt32("ServiceID");
                this.Status = element.GetChildValue("Status");

                this.URL = element.GetChildValueAsUri("ProjectURL");

                this.Name = element.GetChildValue("ProjectName");

                this.Price = element.GetChildValueAsDecimal("Price");
                this.Currency = element.GetChildValue("Currency");
                this.CreationDate = element.GetChildValueAsDateTime("CreationDate");

                this.DueDate = element.GetChildValueAsDateTime("ProjectDueDate");
                this.DueDate = (this.DueDate == DateTime.MinValue) ? element.GetChildValueAsDateTime("DueDate") : this.DueDate;

                this.CompletionDate = element.GetChildValueAsDateTime("CompletionDate");

                XElement sourceLanguage = element.Element("SourceLanguage");
                if (element.Element("SourceLanguage") != null)
                {
                    this.SourceLanguage = sourceLanguage.GetChildValue("LanguageCode");
                }

                XElement targetLanguages = element.Element("TargetLanguages");
                this.TargetLanguagesList = new List<string>();

                if (targetLanguages != null)
                {
                    foreach (XElement targetLanguage in targetLanguages.Descendants("LanguageCode"))
                    {
                        this.TargetLanguagesList.Add(targetLanguage.Value);
                    }
                }

                if (element.Element("Products") != null)
                {
                    this.ProductsList = new List<Product>(Product.CreateEnumerable(element.Element("Products"), this.Client));
                }

                if (element.Element("Files") != null)
                {
                    if (this.FilesList != null && this.FilesList.Count == element.Descendants("File").Count())
                    {
                        for (int i = 0; i < this.FilesList.Count; i++)
                        {
                            this.FilesList[i].UpdateFromXElement(element.Descendants("File").InDocumentOrder().ElementAt(i));
                        }
                    }
                    else
                    {
                        this.FilesList = new List<File>(File.CreateEnumerable(element.Element("Files"), this.Client));
                    }
                }

                if (element.Element("ReferenceFiles") != null)
                {
                    if (this.ReferenceFilesList != null && this.ReferenceFilesList.Count == element.Descendants("ReferenceFile").Count())
                    {
                        for (int i = 0; i < this.ReferenceFilesList.Count; i++)
                        {
                            this.ReferenceFilesList[i].UpdateFromXElement(element.Descendants("ReferenceFile").InDocumentOrder().ElementAt(i));
                        }
                    }
                    else
                    {
                        this.ReferenceFilesList = new List<File>(File.CreateEnumerable(element.Element("ReferenceFiles"), this.Client));
                    }
                }
            }
        }

        /// <summary>
        /// Update the Project from the content API
        /// </summary>
        /// <returns></returns>
        public void Update()
        {
            if (this.Client == null)
            {
                throw new InvalidOperationException("The project does not have an APIClient to communicate with");
            }

            this.Client.UpdateProject(this);
        }
    }
}
