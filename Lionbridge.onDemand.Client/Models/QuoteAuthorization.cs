/* Copyright (c) 2015 Lionbridge Technologies, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * */

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;

namespace Lionbridge.onDemand.Client
{
    /// <summary>
    /// 
    /// </summary>
    public class QuoteAuthorization
    {
        #region Public Properties

        /// <summary>
        /// Status of the quote.  Authorized means that the projects have been paid for and the
        /// project can start.  Pending means that the merchant must execute a transaction to pay for
        /// the project.  Look for a PaymentURL for the merchant to click through.
        /// </summary>
        public String Status
        {
            get;
            protected set;
        }

        /// <summary>
        /// If additional funds are required, the status code of 402 will be returned and the
        /// response will include a PaymentURL that includes a link to a paypal page.
        /// </summary>
        public String PaymentURL
        {
            get;
            protected set;
        }

        /// <summary>
        /// URL that can be used to check the status of the quote.  This is useful for polling quotes 
        /// that are externally paid for.  See Get Quote.
        /// </summary>
        public String QuoteURL
        {
            get;
            protected set;
        }

        /// <summary>
        /// A list of projects that have been generated by this transaction.
        /// </summary>
        public Project[] Projects
        {
            get;
            protected set;
        }

        #endregion


        #region Constructor(s)

        /// <summary>
        /// 
        /// </summary>
        /// <param name="element"></param>
        /// <param name="client"></param>
        public QuoteAuthorization(XElement element, IContentAPI client)
        {
            this.Status = element.GetChildValue("Status");
            this.PaymentURL = element.GetChildValue("PaymentURL");
            this.QuoteURL = element.GetChildValue("QuoteURL");

            this.Projects = Project.CreateEnumerable(element.Element("Projects"), client).ToArray();
        }

        #endregion
    }
}
